{"version":3,"sources":["layout/Header.js","layout/Nav.js","request/index.js","redux/action/userInfo.js","views/index.js","views/Login.js","layout/index.js","redux/reducer/userInfo.js","redux/reducer/index.js","serviceWorker.js","index.js","layout/index.module.scss"],"names":["Header","theme","mode","defaultSelectedKeys","Item","key","Sider","Layout","Nav","className","styles","width","request","url","params","options","a","headers","Authorization","fetch","response","status","statusText","data","alert","json","fetchSend","subreddit","type","loading","Home","handleClick","getData","props","console","log","this","onClick","React","Component","connect","userInfo","dispatch","dataSource","name","age","address","columns","title","dataIndex","Login","Content","BasicLayout","exact","path","combineReducers","state","test","action","Boolean","window","location","hostname","match","store","createStore","reducer","applyMiddleware","thunkMiddleware","ReactDOM","render","locale","zhCN","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.53962d36.chunk.js","sourcesContent":["import React from 'react'\nimport Layout from 'antd/es/layout'\nimport Menu from 'antd/es/menu'\n\nfunction Header() {\n  return (\n    <Layout>\n      <Menu\n        theme=\"dark\"\n        mode=\"horizontal\"\n        defaultSelectedKeys={['2']}\n      >\n        <Menu.Item key=\"1\">nav 1</Menu.Item>\n        <Menu.Item key=\"2\">nav 2</Menu.Item>\n        <Menu.Item key=\"3\">nav 3</Menu.Item>\n      </Menu>\n    </Layout>\n  )\n}\n\n\nexport default Header","import React from 'react'\nimport Layout from 'antd/es/layout'\nimport Menu from 'antd/es/menu'\nimport styles from './index.module.scss'\n\nconst { Sider } = Layout\n\nfunction Nav() {\n  return (\n    <Layout className={styles['ms-layout']}>\n      <Sider width={200}>\n        <Menu        \n          theme=\"dark\"\n          defaultSelectedKeys={['2']}\n        >\n          <Menu.Item key=\"1\">option1</Menu.Item>\n          <Menu.Item key=\"2\">option2</Menu.Item>\n          <Menu.Item key=\"3\">option3</Menu.Item>\n          <Menu.Item key=\"4\">option4</Menu.Item>\n        </Menu>\n      </Sider>\n    </Layout>\n  )\n}\n\nexport default Nav","import fetch from \"cross-fetch\"\n\nconst request = async (url, params, options) => {\n  const headers = {\n    ...options,\n    Authorization: \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoibGl5YW5nIiwiX2lkIjoiMSIsImlhdCI6MTU4NDg5MDYyMCwiZXhwIjoxNTg0ODk0MjIwfQ.a78zQnecPRVNRthJMXyJCXz0OuzLRdgwFZbDlBN4vyc\"\n  }\n  const response = await fetch(url, {\n    headers\n  })\n  const { status, statusText } = response\n  \n  const data = {\n    status,\n    statusText,\n  }\n  switch(status) {\n    case 401: \n      alert('请登录')\n      break\n    default: \n      data.data = await response.json()\n      break\n  }\n  return data\n}\n\nexport default request","import request from '../../request'\n\nconst USER_INFO = 'USER_INFO'\n\nexport const saveUserInfo = userInfo => ({\n  type: USER_INFO,\n  userInfo,\n})\n\nconst fetchSend = subreddit => ({\n  type: 'FETCH_SEND',\n  subreddit,\n  loading: true,\n})\n\nconst featchCompleted = (subreddit, data) => ({\n  type: 'FETCH_COMPLETED',\n  subreddit,\n  data,\n  loading: false,\n})\n\nexport const getInfo = subreddit => async dispatch => {\n  dispatch(fetchSend(subreddit))\n  const data = await request('/api/getName')\n  console.log(data)\n  // const data = request('/graphql')\n  // dispatch(featchCompleted(subreddit, data))\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { getInfo } from '../redux/action/userInfo'\n\nclass Home extends React.Component {\n  handleClick = () => {\n    const { getData } = this.props\n    getData()\n  }\n\n  render() {\n    console.log(this.props)\n    return (\n      <div>\n        <div onClick={this.handleClick}>home page a</div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = userInfo => ({\n  userInfo,\n})\n\nconst mapDispatchToProps = dispatch => ({\n  getData: () => {\n    dispatch(getInfo())\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)\n","import React from 'react'\nimport { Form, Table } from 'antd'\n\nconst dataSource = [\n  {\n    key: '1',\n    name: '胡彦斌',\n    age: 32,\n    address: '西湖区湖底公园1号',\n  },\n  {\n    key: '2',\n    name: '胡彦祖',\n    age: 42,\n    address: '西湖区湖底公园1号',\n  },\n]\n\nconst columns = [\n  {\n    title: '姓名',\n    dataIndex: 'name',\n    key: 'name',\n  },\n  {\n    title: '年龄',\n    dataIndex: 'age',\n    key: 'age',\n  },\n  {\n    title: '住址',\n    dataIndex: 'address',\n    key: 'address',\n  },\n]\n\nclass Login extends React.Component {\n  render() {\n    return (\n      <div>\n        <Form></Form>\n        <Table dataSource={dataSource} columns={columns} />\n      </div>\n    )\n  }\n}\n\nexport default Login\n","import React from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Layout from 'antd/es/layout'\nimport Header from './Header'\nimport Nav from './Nav'\nimport Home from '../views'\nimport Login from '../views/Login'\nimport styles from './index.module.scss'\n\nconst { Content } = Layout\n\nexport default function BasicLayout() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\">\n          <Layout className={styles['ms-layout']}>\n            <Header />\n            <Nav />\n            <Layout>\n              <Content>\n                <Home />\n              </Content>\n            </Layout>\n          </Layout>\n        </Route>\n        <Route path=\"/login\">\n          <Login />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  )\n}\n","export const userInfo = (state = { test: 234234 }, action) => {\n  switch (action.type) {\n    case 'SAVE_USER_INFO':\n      return { ...state, userInfo: action.userInfo }\n    case 'FETCH_COMPLETED':\n      return { ...state, userInfo: action.data }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport { userInfo } from './userInfo'\n\nexport default combineReducers({\n  userInfo,\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { createStore, applyMiddleware } from 'redux'\nimport ConfigProvider from 'antd/lib/config-provider'\nimport zhCN from 'antd/es/locale/zh_CN'\nimport Layout from './layout'\nimport reducer from './redux/reducer'\nimport 'antd/dist/antd.css'\nimport './assets/styles/common.scss'\n\nimport * as serviceWorker from './serviceWorker'\n\nconst store = createStore(reducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n  <ConfigProvider locale={zhCN}>\n    <Provider store={store}>\n      <Layout />\n    </Provider>\n  </ConfigProvider>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ms-layout\":\"layout_ms-layout__1nGS2\"};"],"sourceRoot":""}